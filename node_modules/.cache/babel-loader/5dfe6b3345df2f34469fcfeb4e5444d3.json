{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/React/workspace/src/FrontEnd/Components/InputNumber.js\";\nimport React from 'react';\nimport { Input, Tooltip } from 'antd';\nimport './InputNumber.css';\n\nfunction formatNumber(value) {\n  value += '';\n  const list = value.split('.');\n  const prefix = list[0].charAt(0) === '-' ? '-' : '';\n  let num = prefix ? list[0].slice(1) : list[0];\n  let result = '';\n\n  while (num.length > 3) {\n    result = \",\".concat(num.slice(-3)).concat(result);\n    num = num.slice(0, num.length - 3);\n  }\n\n  if (num) {\n    result = num + result;\n  }\n\n  return \"\".concat(prefix).concat(result).concat(list[1] ? \".\".concat(list[1]) : '');\n}\n\nclass NumericInput extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onChange = e => {\n      const value = e.target.value;\n      const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n\n      if (!Number.isNaN(value) && reg.test(value) || value === '' || value === '-') {\n        this.props.onChange(value);\n      }\n    };\n\n    this.onBlur = () => {\n      const _this$props = this.props,\n            value = _this$props.value,\n            onBlur = _this$props.onBlur,\n            onChange = _this$props.onChange;\n\n      if (value.charAt(value.length - 1) === '.' || value === '-') {\n        onChange(value.slice(0, -1));\n      }\n\n      if (onBlur) {\n        onBlur();\n      }\n    };\n  }\n\n  render() {\n    const value = this.props.value;\n    return React.createElement(Input, Object.assign({}, this.props, {\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      placeholder: \"Input\",\n      maxLength: 25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass NumericInputDemo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = value => {\n      this.setState({\n        value\n      });\n    };\n\n    this.state = {\n      value: ''\n    };\n  }\n\n  render() {\n    return React.createElement(NumericInput, {\n      style: {\n        width: 115\n      },\n      value: this.state.value,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default NumericInputDemo;","map":{"version":3,"sources":["/Users/mac/Documents/React/workspace/src/FrontEnd/Components/InputNumber.js"],"names":["React","Input","Tooltip","formatNumber","value","list","split","prefix","charAt","num","slice","result","length","NumericInput","Component","onChange","e","target","reg","Number","isNaN","test","props","onBlur","render","NumericInputDemo","constructor","setState","state","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Input, Tooltip } from 'antd';\nimport './InputNumber.css'\nfunction formatNumber(value) {\n  value += '';\n  const list = value.split('.');\n  const prefix = list[0].charAt(0) === '-' ? '-' : '';\n  let num = prefix ? list[0].slice(1) : list[0];\n  let result = '';\n  while (num.length > 3) {\n    result = `,${num.slice(-3)}${result}`;\n    num = num.slice(0, num.length - 3);\n  }\n  if (num) {\n    result = num + result;\n  }\n  return `${prefix}${result}${list[1] ? `.${list[1]}` : ''}`;\n}\n\nclass NumericInput extends React.Component {\n  onChange = e => {\n    const { value } = e.target;\n    const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n    if ((!Number.isNaN(value) && reg.test(value)) || value === '' || value === '-') {\n      this.props.onChange(value);\n    }\n  };\n\n  // '.' at the end or only '-' in the input box.\n  onBlur = () => {\n    const { value, onBlur, onChange } = this.props;\n    if (value.charAt(value.length - 1) === '.' || value === '-') {\n      onChange(value.slice(0, -1));\n    }\n    if (onBlur) {\n      onBlur();\n    }\n  };\n\n  render() {\n    const { value } = this.props;\n\n    return (\n\n        <Input\n          {...this.props}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          placeholder=\"Input\"\n          maxLength={25}\n        />\n      \n    );\n  }\n}\n\nclass NumericInputDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n\n  onChange = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <NumericInput style={{ width: 115 }} value={this.state.value} onChange={this.onChange} />\n    );\n  }\n}\n\nexport default NumericInputDemo"]},"metadata":{},"sourceType":"module"}