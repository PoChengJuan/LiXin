{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/React/workspace/src/FrontEnd/Components/InputNumber.js\";\nimport React from 'react';\nimport { Input } from 'antd';\nimport './InputNumber.css';\n/*function formatNumber(value) {\n  value += '';\n  const list = value.split('.');\n  const prefix = list[0].charAt(0) === '-' ? '-' : '';\n  let num = prefix ? list[0].slice(1) : list[0];\n  let result = '';\n  while (num.length > 3) {\n    result = `,${num.slice(-3)}${result}`;\n    num = num.slice(0, num.length - 3);\n  }\n  if (num) {\n    result = num + result;\n  }\n  return `${prefix}${result}${list[1] ? `.${list[1]}` : ''}`;\n}*/\n\nclass NumericInput extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onChange = e => {\n      const value = e.target.value;\n      const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n\n      if (!Number.isNaN(value) && reg.test(value) || value === '' || value === '-') {\n        this.props.onChange(value);\n      }\n    };\n\n    this.onBlur = () => {\n      const onBlur = this.props.onBlur;\n      /*if (value.charAt(value.length - 1) === '.' || value === '-') {\n        onChange(value.slice(0, -1));\n      }*/\n\n      if (onBlur) {\n        onBlur();\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Input, Object.assign({}, this.props, {\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      placeholder: \"\",\n      maxLength: 25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  }\n\n}\n/*\nclass NumericInputDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n\n  onChange = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <NumericInput style={{ width: 115 }} value={this.state.value} onChange={this.onChange} />\n    );\n  }\n}*/\n\n\nexport default NumericInput;","map":{"version":3,"sources":["/Users/mac/Documents/React/workspace/src/FrontEnd/Components/InputNumber.js"],"names":["React","Input","NumericInput","Component","onChange","e","value","target","reg","Number","isNaN","test","props","onBlur","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,OAAO,mBAAP;AAEA;;;;;;;;;;;;;;;;AAgBA,MAAMC,YAAN,SAA2BF,KAAK,CAACG,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACzCC,QADyC,GAC9BC,CAAC,IAAI;AAAA,YACNC,KADM,GACID,CAAC,CAACE,MADN,CACND,KADM;AAEd,YAAME,GAAG,GAAG,gCAAZ;;AACA,UAAK,CAACC,MAAM,CAACC,KAAP,CAAaJ,KAAb,CAAD,IAAwBE,GAAG,CAACG,IAAJ,CAASL,KAAT,CAAzB,IAA6CA,KAAK,KAAK,EAAvD,IAA6DA,KAAK,KAAK,GAA3E,EAAgF;AAC9E,aAAKM,KAAL,CAAWR,QAAX,CAAoBE,KAApB;AACD;AACF,KAPwC;;AAAA,SAUzCO,MAVyC,GAUhC,MAAM;AAAA,YACLA,MADK,GACM,KAAKD,KADX,CACLC,MADK;AAEb;;;;AAGA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM;AACP;AACF,KAlBwC;AAAA;;AAoBzCC,EAAAA,MAAM,GAAG;AAEP,WAEI,oBAAC,KAAD,oBACM,KAAKF,KADX;AAEE,MAAA,QAAQ,EAAE,KAAKR,QAFjB;AAGE,MAAA,MAAM,EAAE,KAAKS,MAHf;AAIE,MAAA,WAAW,EAAC,EAJd;AAKE,MAAA,SAAS,EAAE,EALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFJ;AAWD;;AAjCwC;AAmC3C;;;;;;;;;;;;;;;;;;;AAkBA,eAAeX,YAAf","sourcesContent":["import React from 'react';\nimport { Input } from 'antd';\nimport './InputNumber.css'\n\n/*function formatNumber(value) {\n  value += '';\n  const list = value.split('.');\n  const prefix = list[0].charAt(0) === '-' ? '-' : '';\n  let num = prefix ? list[0].slice(1) : list[0];\n  let result = '';\n  while (num.length > 3) {\n    result = `,${num.slice(-3)}${result}`;\n    num = num.slice(0, num.length - 3);\n  }\n  if (num) {\n    result = num + result;\n  }\n  return `${prefix}${result}${list[1] ? `.${list[1]}` : ''}`;\n}*/\n\nclass NumericInput extends React.Component {\n  onChange = e => {\n    const { value } = e.target;\n    const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n    if ((!Number.isNaN(value) && reg.test(value)) || value === '' || value === '-') {\n      this.props.onChange(value);\n    }\n  };\n\n  // '.' at the end or only '-' in the input box.\n  onBlur = () => {\n    const { onBlur } = this.props;\n    /*if (value.charAt(value.length - 1) === '.' || value === '-') {\n      onChange(value.slice(0, -1));\n    }*/\n    if (onBlur) {\n      onBlur();\n    }\n  };\n\n  render() {\n\n    return (\n\n        <Input\n          {...this.props}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          placeholder=\"\"\n          maxLength={25}\n        />\n      \n    );\n  }\n}\n/*\nclass NumericInputDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n\n  onChange = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <NumericInput style={{ width: 115 }} value={this.state.value} onChange={this.onChange} />\n    );\n  }\n}*/\n\nexport default NumericInput"]},"metadata":{},"sourceType":"module"}